{"ast":null,"code":"import { RealtimeEventHandler } from './event_handler.js';\nimport { RealtimeUtils } from './utils.js';\nexport class RealtimeAPI extends RealtimeEventHandler {\n  /**\n   * Create a new RealtimeAPI instance\n   * @param {{url?: string, apiKey?: string, dangerouslyAllowAPIKeyInBrowser?: boolean, debug?: boolean}} [settings]\n   * @returns {RealtimeAPI}\n   */\n  constructor({\n    url,\n    apiKey,\n    dangerouslyAllowAPIKeyInBrowser,\n    debug\n  } = {}) {\n    super();\n    this.defaultUrl = 'wss://api.openai.com/v1/realtime';\n    this.url = url || this.defaultUrl;\n    this.apiKey = apiKey || null;\n    this.debug = !!debug;\n    this.ws = null;\n    if (globalThis.document && this.apiKey) {\n      if (!dangerouslyAllowAPIKeyInBrowser) {\n        throw new Error(`Can not provide API key in the browser without \"dangerouslyAllowAPIKeyInBrowser\" set to true`);\n      }\n    }\n  }\n\n  /**\n   * Tells us whether or not the WebSocket is connected\n   * @returns {boolean}\n   */\n  isConnected() {\n    return !!this.ws;\n  }\n\n  /**\n   * Writes WebSocket logs to console\n   * @param  {...any} args\n   * @returns {true}\n   */\n  log(...args) {\n    const date = new Date().toISOString();\n    const logs = [`[Websocket/${date}]`].concat(args).map(arg => {\n      if (typeof arg === 'object' && arg !== null) {\n        return JSON.stringify(arg, null, 2);\n      } else {\n        return arg;\n      }\n    });\n    if (this.debug) {\n      console.log(...logs);\n    }\n    return true;\n  }\n\n  /**\n   * Connects to Realtime API Websocket Server\n   * @param {{model?: string}} [settings]\n   * @returns {Promise<true>}\n   */\n  async connect({\n    model\n  } = {\n    model: 'gpt-4o-realtime-preview-2024-10-01'\n  }) {\n    if (!this.apiKey && this.url === this.defaultUrl) {\n      console.warn(`No apiKey provided for connection to \"${this.url}\"`);\n    }\n    if (this.isConnected()) {\n      throw new Error(`Already connected`);\n    }\n    if (globalThis.document) {\n      /**\n       * Web browser\n       */\n      if (this.apiKey) {\n        console.warn('Warning: Connecting using API key in the browser, this is not recommended');\n      }\n      const WebSocket = globalThis.WebSocket;\n      const ws = new WebSocket(`${this.url}${model ? `?model=${model}` : ''}`, ['realtime', `openai-insecure-api-key.${this.apiKey}`, 'openai-beta.realtime-v1']);\n      ws.addEventListener('message', event => {\n        const message = JSON.parse(event.data);\n        this.receive(message.type, message);\n      });\n      return new Promise((resolve, reject) => {\n        const connectionErrorHandler = () => {\n          this.disconnect(ws);\n          reject(new Error(`Could not connect to \"${this.url}\"`));\n        };\n        ws.addEventListener('error', connectionErrorHandler);\n        ws.addEventListener('open', () => {\n          this.log(`Connected to \"${this.url}\"`);\n          ws.removeEventListener('error', connectionErrorHandler);\n          ws.addEventListener('error', () => {\n            this.disconnect(ws);\n            this.log(`Error, disconnected from \"${this.url}\"`);\n            this.dispatch('close', {\n              error: true\n            });\n          });\n          ws.addEventListener('close', () => {\n            this.disconnect(ws);\n            this.log(`Disconnected from \"${this.url}\"`);\n            this.dispatch('close', {\n              error: false\n            });\n          });\n          this.ws = ws;\n          resolve(true);\n        });\n      });\n    } else {\n      /**\n       * Node.js\n       */\n      const moduleName = 'ws';\n      const wsModule = await import(/* webpackIgnore: true */moduleName);\n      const WebSocket = wsModule.default;\n      const ws = new WebSocket('wss://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview-2024-10-01', [], {\n        finishRequest: request => {\n          // Auth\n          request.setHeader('Authorization', `Bearer ${this.apiKey}`);\n          request.setHeader('OpenAI-Beta', 'realtime=v1');\n          request.end();\n        }\n      });\n      ws.on('message', data => {\n        const message = JSON.parse(data.toString());\n        this.receive(message.type, message);\n      });\n      return new Promise((resolve, reject) => {\n        const connectionErrorHandler = () => {\n          this.disconnect(ws);\n          reject(new Error(`Could not connect to \"${this.url}\"`));\n        };\n        ws.on('error', connectionErrorHandler);\n        ws.on('open', () => {\n          this.log(`Connected to \"${this.url}\"`);\n          ws.removeListener('error', connectionErrorHandler);\n          ws.on('error', () => {\n            this.disconnect(ws);\n            this.log(`Error, disconnected from \"${this.url}\"`);\n            this.dispatch('close', {\n              error: true\n            });\n          });\n          ws.on('close', () => {\n            this.disconnect(ws);\n            this.log(`Disconnected from \"${this.url}\"`);\n            this.dispatch('close', {\n              error: false\n            });\n          });\n          this.ws = ws;\n          resolve(true);\n        });\n      });\n    }\n  }\n\n  /**\n   * Disconnects from Realtime API server\n   * @param {WebSocket} [ws]\n   * @returns {true}\n   */\n  disconnect(ws) {\n    if (!ws || this.ws === ws) {\n      this.ws && this.ws.close();\n      this.ws = null;\n      return true;\n    }\n  }\n\n  /**\n   * Receives an event from WebSocket and dispatches as \"server.{eventName}\" and \"server.*\" events\n   * @param {string} eventName\n   * @param {{[key: string]: any}} event\n   * @returns {true}\n   */\n  receive(eventName, event) {\n    this.log(`received:`, eventName, event);\n    this.dispatch(`server.${eventName}`, event);\n    this.dispatch('server.*', event);\n    return true;\n  }\n\n  /**\n   * Sends an event to WebSocket and dispatches as \"client.{eventName}\" and \"client.*\" events\n   * @param {string} eventName\n   * @param {{[key: string]: any}} event\n   * @returns {true}\n   */\n  send(eventName, data) {\n    if (!this.isConnected()) {\n      throw new Error(`RealtimeAPI is not connected`);\n    }\n    data = data || {};\n    if (typeof data !== 'object') {\n      throw new Error(`data must be an object`);\n    }\n    const event = {\n      event_id: RealtimeUtils.generateId('evt_'),\n      type: eventName,\n      ...data\n    };\n    this.dispatch(`client.${eventName}`, event);\n    this.dispatch('client.*', event);\n    this.log(`sent:`, eventName, event);\n    this.ws.send(JSON.stringify(event));\n    return true;\n  }\n}","map":{"version":3,"names":["RealtimeEventHandler","RealtimeUtils","RealtimeAPI","constructor","url","apiKey","dangerouslyAllowAPIKeyInBrowser","debug","defaultUrl","ws","globalThis","document","Error","isConnected","log","args","date","Date","toISOString","logs","concat","map","arg","JSON","stringify","console","connect","model","warn","WebSocket","addEventListener","event","message","parse","data","receive","type","Promise","resolve","reject","connectionErrorHandler","disconnect","removeEventListener","dispatch","error","moduleName","wsModule","default","finishRequest","request","setHeader","end","on","toString","removeListener","close","eventName","send","event_id","generateId"],"sources":["/Users/michaelmccarthy/Desktop/work_local/nxt_humans/projects/nxt-hackathon-front-end-app/node_modules/@openai/realtime-api-beta/lib/api.js"],"sourcesContent":["import { RealtimeEventHandler } from './event_handler.js';\nimport { RealtimeUtils } from './utils.js';\n\nexport class RealtimeAPI extends RealtimeEventHandler {\n  /**\n   * Create a new RealtimeAPI instance\n   * @param {{url?: string, apiKey?: string, dangerouslyAllowAPIKeyInBrowser?: boolean, debug?: boolean}} [settings]\n   * @returns {RealtimeAPI}\n   */\n  constructor({ url, apiKey, dangerouslyAllowAPIKeyInBrowser, debug } = {}) {\n    super();\n    this.defaultUrl = 'wss://api.openai.com/v1/realtime';\n    this.url = url || this.defaultUrl;\n    this.apiKey = apiKey || null;\n    this.debug = !!debug;\n    this.ws = null;\n    if (globalThis.document && this.apiKey) {\n      if (!dangerouslyAllowAPIKeyInBrowser) {\n        throw new Error(\n          `Can not provide API key in the browser without \"dangerouslyAllowAPIKeyInBrowser\" set to true`,\n        );\n      }\n    }\n  }\n\n  /**\n   * Tells us whether or not the WebSocket is connected\n   * @returns {boolean}\n   */\n  isConnected() {\n    return !!this.ws;\n  }\n\n  /**\n   * Writes WebSocket logs to console\n   * @param  {...any} args\n   * @returns {true}\n   */\n  log(...args) {\n    const date = new Date().toISOString();\n    const logs = [`[Websocket/${date}]`].concat(args).map((arg) => {\n      if (typeof arg === 'object' && arg !== null) {\n        return JSON.stringify(arg, null, 2);\n      } else {\n        return arg;\n      }\n    });\n    if (this.debug) {\n      console.log(...logs);\n    }\n    return true;\n  }\n\n  /**\n   * Connects to Realtime API Websocket Server\n   * @param {{model?: string}} [settings]\n   * @returns {Promise<true>}\n   */\n  async connect({ model } = { model: 'gpt-4o-realtime-preview-2024-10-01' }) {\n    if (!this.apiKey && this.url === this.defaultUrl) {\n      console.warn(`No apiKey provided for connection to \"${this.url}\"`);\n    }\n    if (this.isConnected()) {\n      throw new Error(`Already connected`);\n    }\n    if (globalThis.document) {\n      /**\n       * Web browser\n       */\n      if (this.apiKey) {\n        console.warn(\n          'Warning: Connecting using API key in the browser, this is not recommended',\n        );\n      }\n      const WebSocket = globalThis.WebSocket;\n      const ws = new WebSocket(`${this.url}${model ? `?model=${model}` : ''}`, [\n        'realtime',\n        `openai-insecure-api-key.${this.apiKey}`,\n        'openai-beta.realtime-v1',\n      ]);\n      ws.addEventListener('message', (event) => {\n        const message = JSON.parse(event.data);\n        this.receive(message.type, message);\n      });\n      return new Promise((resolve, reject) => {\n        const connectionErrorHandler = () => {\n          this.disconnect(ws);\n          reject(new Error(`Could not connect to \"${this.url}\"`));\n        };\n        ws.addEventListener('error', connectionErrorHandler);\n        ws.addEventListener('open', () => {\n          this.log(`Connected to \"${this.url}\"`);\n          ws.removeEventListener('error', connectionErrorHandler);\n          ws.addEventListener('error', () => {\n            this.disconnect(ws);\n            this.log(`Error, disconnected from \"${this.url}\"`);\n            this.dispatch('close', { error: true });\n          });\n          ws.addEventListener('close', () => {\n            this.disconnect(ws);\n            this.log(`Disconnected from \"${this.url}\"`);\n            this.dispatch('close', { error: false });\n          });\n          this.ws = ws;\n          resolve(true);\n        });\n      });\n    } else {\n      /**\n       * Node.js\n       */\n      const moduleName = 'ws';\n      const wsModule = await import(/* webpackIgnore: true */ moduleName);\n      const WebSocket = wsModule.default;\n      const ws = new WebSocket(\n        'wss://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview-2024-10-01',\n        [],\n        {\n          finishRequest: (request) => {\n            // Auth\n            request.setHeader('Authorization', `Bearer ${this.apiKey}`);\n            request.setHeader('OpenAI-Beta', 'realtime=v1');\n            request.end();\n          },\n        },\n      );\n      ws.on('message', (data) => {\n        const message = JSON.parse(data.toString());\n        this.receive(message.type, message);\n      });\n      return new Promise((resolve, reject) => {\n        const connectionErrorHandler = () => {\n          this.disconnect(ws);\n          reject(new Error(`Could not connect to \"${this.url}\"`));\n        };\n        ws.on('error', connectionErrorHandler);\n        ws.on('open', () => {\n          this.log(`Connected to \"${this.url}\"`);\n          ws.removeListener('error', connectionErrorHandler);\n          ws.on('error', () => {\n            this.disconnect(ws);\n            this.log(`Error, disconnected from \"${this.url}\"`);\n            this.dispatch('close', { error: true });\n          });\n          ws.on('close', () => {\n            this.disconnect(ws);\n            this.log(`Disconnected from \"${this.url}\"`);\n            this.dispatch('close', { error: false });\n          });\n          this.ws = ws;\n          resolve(true);\n        });\n      });\n    }\n  }\n\n  /**\n   * Disconnects from Realtime API server\n   * @param {WebSocket} [ws]\n   * @returns {true}\n   */\n  disconnect(ws) {\n    if (!ws || this.ws === ws) {\n      this.ws && this.ws.close();\n      this.ws = null;\n      return true;\n    }\n  }\n\n  /**\n   * Receives an event from WebSocket and dispatches as \"server.{eventName}\" and \"server.*\" events\n   * @param {string} eventName\n   * @param {{[key: string]: any}} event\n   * @returns {true}\n   */\n  receive(eventName, event) {\n    this.log(`received:`, eventName, event);\n    this.dispatch(`server.${eventName}`, event);\n    this.dispatch('server.*', event);\n    return true;\n  }\n\n  /**\n   * Sends an event to WebSocket and dispatches as \"client.{eventName}\" and \"client.*\" events\n   * @param {string} eventName\n   * @param {{[key: string]: any}} event\n   * @returns {true}\n   */\n  send(eventName, data) {\n    if (!this.isConnected()) {\n      throw new Error(`RealtimeAPI is not connected`);\n    }\n    data = data || {};\n    if (typeof data !== 'object') {\n      throw new Error(`data must be an object`);\n    }\n    const event = {\n      event_id: RealtimeUtils.generateId('evt_'),\n      type: eventName,\n      ...data,\n    };\n    this.dispatch(`client.${eventName}`, event);\n    this.dispatch('client.*', event);\n    this.log(`sent:`, eventName, event);\n    this.ws.send(JSON.stringify(event));\n    return true;\n  }\n}\n"],"mappings":"AAAA,SAASA,oBAAoB,QAAQ,oBAAoB;AACzD,SAASC,aAAa,QAAQ,YAAY;AAE1C,OAAO,MAAMC,WAAW,SAASF,oBAAoB,CAAC;EACpD;AACF;AACA;AACA;AACA;EACEG,WAAWA,CAAC;IAAEC,GAAG;IAAEC,MAAM;IAAEC,+BAA+B;IAAEC;EAAM,CAAC,GAAG,CAAC,CAAC,EAAE;IACxE,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,UAAU,GAAG,kCAAkC;IACpD,IAAI,CAACJ,GAAG,GAAGA,GAAG,IAAI,IAAI,CAACI,UAAU;IACjC,IAAI,CAACH,MAAM,GAAGA,MAAM,IAAI,IAAI;IAC5B,IAAI,CAACE,KAAK,GAAG,CAAC,CAACA,KAAK;IACpB,IAAI,CAACE,EAAE,GAAG,IAAI;IACd,IAAIC,UAAU,CAACC,QAAQ,IAAI,IAAI,CAACN,MAAM,EAAE;MACtC,IAAI,CAACC,+BAA+B,EAAE;QACpC,MAAM,IAAIM,KAAK,CACb,8FACF,CAAC;MACH;IACF;EACF;;EAEA;AACF;AACA;AACA;EACEC,WAAWA,CAAA,EAAG;IACZ,OAAO,CAAC,CAAC,IAAI,CAACJ,EAAE;EAClB;;EAEA;AACF;AACA;AACA;AACA;EACEK,GAAGA,CAAC,GAAGC,IAAI,EAAE;IACX,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACrC,MAAMC,IAAI,GAAG,CAAC,cAAcH,IAAI,GAAG,CAAC,CAACI,MAAM,CAACL,IAAI,CAAC,CAACM,GAAG,CAAEC,GAAG,IAAK;MAC7D,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,KAAK,IAAI,EAAE;QAC3C,OAAOC,IAAI,CAACC,SAAS,CAACF,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;MACrC,CAAC,MAAM;QACL,OAAOA,GAAG;MACZ;IACF,CAAC,CAAC;IACF,IAAI,IAAI,CAACf,KAAK,EAAE;MACdkB,OAAO,CAACX,GAAG,CAAC,GAAGK,IAAI,CAAC;IACtB;IACA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMO,OAAOA,CAAC;IAAEC;EAAM,CAAC,GAAG;IAAEA,KAAK,EAAE;EAAqC,CAAC,EAAE;IACzE,IAAI,CAAC,IAAI,CAACtB,MAAM,IAAI,IAAI,CAACD,GAAG,KAAK,IAAI,CAACI,UAAU,EAAE;MAChDiB,OAAO,CAACG,IAAI,CAAC,yCAAyC,IAAI,CAACxB,GAAG,GAAG,CAAC;IACpE;IACA,IAAI,IAAI,CAACS,WAAW,CAAC,CAAC,EAAE;MACtB,MAAM,IAAID,KAAK,CAAC,mBAAmB,CAAC;IACtC;IACA,IAAIF,UAAU,CAACC,QAAQ,EAAE;MACvB;AACN;AACA;MACM,IAAI,IAAI,CAACN,MAAM,EAAE;QACfoB,OAAO,CAACG,IAAI,CACV,2EACF,CAAC;MACH;MACA,MAAMC,SAAS,GAAGnB,UAAU,CAACmB,SAAS;MACtC,MAAMpB,EAAE,GAAG,IAAIoB,SAAS,CAAC,GAAG,IAAI,CAACzB,GAAG,GAAGuB,KAAK,GAAG,UAAUA,KAAK,EAAE,GAAG,EAAE,EAAE,EAAE,CACvE,UAAU,EACV,2BAA2B,IAAI,CAACtB,MAAM,EAAE,EACxC,yBAAyB,CAC1B,CAAC;MACFI,EAAE,CAACqB,gBAAgB,CAAC,SAAS,EAAGC,KAAK,IAAK;QACxC,MAAMC,OAAO,GAAGT,IAAI,CAACU,KAAK,CAACF,KAAK,CAACG,IAAI,CAAC;QACtC,IAAI,CAACC,OAAO,CAACH,OAAO,CAACI,IAAI,EAAEJ,OAAO,CAAC;MACrC,CAAC,CAAC;MACF,OAAO,IAAIK,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACtC,MAAMC,sBAAsB,GAAGA,CAAA,KAAM;UACnC,IAAI,CAACC,UAAU,CAAChC,EAAE,CAAC;UACnB8B,MAAM,CAAC,IAAI3B,KAAK,CAAC,yBAAyB,IAAI,CAACR,GAAG,GAAG,CAAC,CAAC;QACzD,CAAC;QACDK,EAAE,CAACqB,gBAAgB,CAAC,OAAO,EAAEU,sBAAsB,CAAC;QACpD/B,EAAE,CAACqB,gBAAgB,CAAC,MAAM,EAAE,MAAM;UAChC,IAAI,CAAChB,GAAG,CAAC,iBAAiB,IAAI,CAACV,GAAG,GAAG,CAAC;UACtCK,EAAE,CAACiC,mBAAmB,CAAC,OAAO,EAAEF,sBAAsB,CAAC;UACvD/B,EAAE,CAACqB,gBAAgB,CAAC,OAAO,EAAE,MAAM;YACjC,IAAI,CAACW,UAAU,CAAChC,EAAE,CAAC;YACnB,IAAI,CAACK,GAAG,CAAC,6BAA6B,IAAI,CAACV,GAAG,GAAG,CAAC;YAClD,IAAI,CAACuC,QAAQ,CAAC,OAAO,EAAE;cAAEC,KAAK,EAAE;YAAK,CAAC,CAAC;UACzC,CAAC,CAAC;UACFnC,EAAE,CAACqB,gBAAgB,CAAC,OAAO,EAAE,MAAM;YACjC,IAAI,CAACW,UAAU,CAAChC,EAAE,CAAC;YACnB,IAAI,CAACK,GAAG,CAAC,sBAAsB,IAAI,CAACV,GAAG,GAAG,CAAC;YAC3C,IAAI,CAACuC,QAAQ,CAAC,OAAO,EAAE;cAAEC,KAAK,EAAE;YAAM,CAAC,CAAC;UAC1C,CAAC,CAAC;UACF,IAAI,CAACnC,EAAE,GAAGA,EAAE;UACZ6B,OAAO,CAAC,IAAI,CAAC;QACf,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;AACN;AACA;MACM,MAAMO,UAAU,GAAG,IAAI;MACvB,MAAMC,QAAQ,GAAG,MAAM,MAAM,CAAC,yBAA0BD,UAAU,CAAC;MACnE,MAAMhB,SAAS,GAAGiB,QAAQ,CAACC,OAAO;MAClC,MAAMtC,EAAE,GAAG,IAAIoB,SAAS,CACtB,2EAA2E,EAC3E,EAAE,EACF;QACEmB,aAAa,EAAGC,OAAO,IAAK;UAC1B;UACAA,OAAO,CAACC,SAAS,CAAC,eAAe,EAAE,UAAU,IAAI,CAAC7C,MAAM,EAAE,CAAC;UAC3D4C,OAAO,CAACC,SAAS,CAAC,aAAa,EAAE,aAAa,CAAC;UAC/CD,OAAO,CAACE,GAAG,CAAC,CAAC;QACf;MACF,CACF,CAAC;MACD1C,EAAE,CAAC2C,EAAE,CAAC,SAAS,EAAGlB,IAAI,IAAK;QACzB,MAAMF,OAAO,GAAGT,IAAI,CAACU,KAAK,CAACC,IAAI,CAACmB,QAAQ,CAAC,CAAC,CAAC;QAC3C,IAAI,CAAClB,OAAO,CAACH,OAAO,CAACI,IAAI,EAAEJ,OAAO,CAAC;MACrC,CAAC,CAAC;MACF,OAAO,IAAIK,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACtC,MAAMC,sBAAsB,GAAGA,CAAA,KAAM;UACnC,IAAI,CAACC,UAAU,CAAChC,EAAE,CAAC;UACnB8B,MAAM,CAAC,IAAI3B,KAAK,CAAC,yBAAyB,IAAI,CAACR,GAAG,GAAG,CAAC,CAAC;QACzD,CAAC;QACDK,EAAE,CAAC2C,EAAE,CAAC,OAAO,EAAEZ,sBAAsB,CAAC;QACtC/B,EAAE,CAAC2C,EAAE,CAAC,MAAM,EAAE,MAAM;UAClB,IAAI,CAACtC,GAAG,CAAC,iBAAiB,IAAI,CAACV,GAAG,GAAG,CAAC;UACtCK,EAAE,CAAC6C,cAAc,CAAC,OAAO,EAAEd,sBAAsB,CAAC;UAClD/B,EAAE,CAAC2C,EAAE,CAAC,OAAO,EAAE,MAAM;YACnB,IAAI,CAACX,UAAU,CAAChC,EAAE,CAAC;YACnB,IAAI,CAACK,GAAG,CAAC,6BAA6B,IAAI,CAACV,GAAG,GAAG,CAAC;YAClD,IAAI,CAACuC,QAAQ,CAAC,OAAO,EAAE;cAAEC,KAAK,EAAE;YAAK,CAAC,CAAC;UACzC,CAAC,CAAC;UACFnC,EAAE,CAAC2C,EAAE,CAAC,OAAO,EAAE,MAAM;YACnB,IAAI,CAACX,UAAU,CAAChC,EAAE,CAAC;YACnB,IAAI,CAACK,GAAG,CAAC,sBAAsB,IAAI,CAACV,GAAG,GAAG,CAAC;YAC3C,IAAI,CAACuC,QAAQ,CAAC,OAAO,EAAE;cAAEC,KAAK,EAAE;YAAM,CAAC,CAAC;UAC1C,CAAC,CAAC;UACF,IAAI,CAACnC,EAAE,GAAGA,EAAE;UACZ6B,OAAO,CAAC,IAAI,CAAC;QACf,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEG,UAAUA,CAAChC,EAAE,EAAE;IACb,IAAI,CAACA,EAAE,IAAI,IAAI,CAACA,EAAE,KAAKA,EAAE,EAAE;MACzB,IAAI,CAACA,EAAE,IAAI,IAAI,CAACA,EAAE,CAAC8C,KAAK,CAAC,CAAC;MAC1B,IAAI,CAAC9C,EAAE,GAAG,IAAI;MACd,OAAO,IAAI;IACb;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE0B,OAAOA,CAACqB,SAAS,EAAEzB,KAAK,EAAE;IACxB,IAAI,CAACjB,GAAG,CAAC,WAAW,EAAE0C,SAAS,EAAEzB,KAAK,CAAC;IACvC,IAAI,CAACY,QAAQ,CAAC,UAAUa,SAAS,EAAE,EAAEzB,KAAK,CAAC;IAC3C,IAAI,CAACY,QAAQ,CAAC,UAAU,EAAEZ,KAAK,CAAC;IAChC,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE0B,IAAIA,CAACD,SAAS,EAAEtB,IAAI,EAAE;IACpB,IAAI,CAAC,IAAI,CAACrB,WAAW,CAAC,CAAC,EAAE;MACvB,MAAM,IAAID,KAAK,CAAC,8BAA8B,CAAC;IACjD;IACAsB,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IACjB,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MAC5B,MAAM,IAAItB,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IACA,MAAMmB,KAAK,GAAG;MACZ2B,QAAQ,EAAEzD,aAAa,CAAC0D,UAAU,CAAC,MAAM,CAAC;MAC1CvB,IAAI,EAAEoB,SAAS;MACf,GAAGtB;IACL,CAAC;IACD,IAAI,CAACS,QAAQ,CAAC,UAAUa,SAAS,EAAE,EAAEzB,KAAK,CAAC;IAC3C,IAAI,CAACY,QAAQ,CAAC,UAAU,EAAEZ,KAAK,CAAC;IAChC,IAAI,CAACjB,GAAG,CAAC,OAAO,EAAE0C,SAAS,EAAEzB,KAAK,CAAC;IACnC,IAAI,CAACtB,EAAE,CAACgD,IAAI,CAAClC,IAAI,CAACC,SAAS,CAACO,KAAK,CAAC,CAAC;IACnC,OAAO,IAAI;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}