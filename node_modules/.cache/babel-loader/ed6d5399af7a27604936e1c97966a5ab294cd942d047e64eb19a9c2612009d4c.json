{"ast":null,"code":"/**\n * Constants for help with visualization\n * Helps map frequency ranges from Fast Fourier Transform\n * to human-interpretable ranges, notably music ranges and\n * human vocal ranges.\n */\n\n// Eighth octave frequencies\nconst octave8Frequencies = [4186.01, 4434.92, 4698.63, 4978.03, 5274.04, 5587.65, 5919.91, 6271.93, 6644.88, 7040.0, 7458.62, 7902.13];\n\n// Labels for each of the above frequencies\nconst octave8FrequencyLabels = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n\n/**\n * All note frequencies from 1st to 8th octave\n * in format \"A#8\" (A#, 8th octave)\n */\nexport const noteFrequencies = [];\nexport const noteFrequencyLabels = [];\nfor (let i = 1; i <= 8; i++) {\n  for (let f = 0; f < octave8Frequencies.length; f++) {\n    const freq = octave8Frequencies[f];\n    noteFrequencies.push(freq / Math.pow(2, 8 - i));\n    noteFrequencyLabels.push(octave8FrequencyLabels[f] + i);\n  }\n}\n\n/**\n * Subset of the note frequencies between 32 and 2000 Hz\n * 6 octave range: C1 to B6\n */\nconst voiceFrequencyRange = [32.0, 2000.0];\nexport const voiceFrequencies = noteFrequencies.filter((_, i) => {\n  return noteFrequencies[i] > voiceFrequencyRange[0] && noteFrequencies[i] < voiceFrequencyRange[1];\n});\nexport const voiceFrequencyLabels = noteFrequencyLabels.filter((_, i) => {\n  return noteFrequencies[i] > voiceFrequencyRange[0] && noteFrequencies[i] < voiceFrequencyRange[1];\n});","map":{"version":3,"names":["octave8Frequencies","octave8FrequencyLabels","noteFrequencies","noteFrequencyLabels","i","f","length","freq","push","Math","pow","voiceFrequencyRange","voiceFrequencies","filter","_","voiceFrequencyLabels"],"sources":["/Users/michaelmccarthy/Desktop/work_local/nxt_humans/projects/nxt-hackathon-front-end-app/src/lib/wavtools/lib/analysis/constants.js"],"sourcesContent":["/**\n * Constants for help with visualization\n * Helps map frequency ranges from Fast Fourier Transform\n * to human-interpretable ranges, notably music ranges and\n * human vocal ranges.\n */\n\n// Eighth octave frequencies\nconst octave8Frequencies = [\n  4186.01, 4434.92, 4698.63, 4978.03, 5274.04, 5587.65, 5919.91, 6271.93,\n  6644.88, 7040.0, 7458.62, 7902.13,\n];\n\n// Labels for each of the above frequencies\nconst octave8FrequencyLabels = [\n  'C',\n  'C#',\n  'D',\n  'D#',\n  'E',\n  'F',\n  'F#',\n  'G',\n  'G#',\n  'A',\n  'A#',\n  'B',\n];\n\n/**\n * All note frequencies from 1st to 8th octave\n * in format \"A#8\" (A#, 8th octave)\n */\nexport const noteFrequencies = [];\nexport const noteFrequencyLabels = [];\nfor (let i = 1; i <= 8; i++) {\n  for (let f = 0; f < octave8Frequencies.length; f++) {\n    const freq = octave8Frequencies[f];\n    noteFrequencies.push(freq / Math.pow(2, 8 - i));\n    noteFrequencyLabels.push(octave8FrequencyLabels[f] + i);\n  }\n}\n\n/**\n * Subset of the note frequencies between 32 and 2000 Hz\n * 6 octave range: C1 to B6\n */\nconst voiceFrequencyRange = [32.0, 2000.0];\nexport const voiceFrequencies = noteFrequencies.filter((_, i) => {\n  return (\n    noteFrequencies[i] > voiceFrequencyRange[0] &&\n    noteFrequencies[i] < voiceFrequencyRange[1]\n  );\n});\nexport const voiceFrequencyLabels = noteFrequencyLabels.filter((_, i) => {\n  return (\n    noteFrequencies[i] > voiceFrequencyRange[0] &&\n    noteFrequencies[i] < voiceFrequencyRange[1]\n  );\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMA,kBAAkB,GAAG,CACzB,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,CAClC;;AAED;AACA,MAAMC,sBAAsB,GAAG,CAC7B,GAAG,EACH,IAAI,EACJ,GAAG,EACH,IAAI,EACJ,GAAG,EACH,GAAG,EACH,IAAI,EACJ,GAAG,EACH,IAAI,EACJ,GAAG,EACH,IAAI,EACJ,GAAG,CACJ;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAG,EAAE;AACjC,OAAO,MAAMC,mBAAmB,GAAG,EAAE;AACrC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;EAC3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,kBAAkB,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;IAClD,MAAME,IAAI,GAAGP,kBAAkB,CAACK,CAAC,CAAC;IAClCH,eAAe,CAACM,IAAI,CAACD,IAAI,GAAGE,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAGN,CAAC,CAAC,CAAC;IAC/CD,mBAAmB,CAACK,IAAI,CAACP,sBAAsB,CAACI,CAAC,CAAC,GAAGD,CAAC,CAAC;EACzD;AACF;;AAEA;AACA;AACA;AACA;AACA,MAAMO,mBAAmB,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC;AAC1C,OAAO,MAAMC,gBAAgB,GAAGV,eAAe,CAACW,MAAM,CAAC,CAACC,CAAC,EAAEV,CAAC,KAAK;EAC/D,OACEF,eAAe,CAACE,CAAC,CAAC,GAAGO,mBAAmB,CAAC,CAAC,CAAC,IAC3CT,eAAe,CAACE,CAAC,CAAC,GAAGO,mBAAmB,CAAC,CAAC,CAAC;AAE/C,CAAC,CAAC;AACF,OAAO,MAAMI,oBAAoB,GAAGZ,mBAAmB,CAACU,MAAM,CAAC,CAACC,CAAC,EAAEV,CAAC,KAAK;EACvE,OACEF,eAAe,CAACE,CAAC,CAAC,GAAGO,mBAAmB,CAAC,CAAC,CAAC,IAC3CT,eAAe,CAACE,CAAC,CAAC,GAAGO,mBAAmB,CAAC,CAAC,CAAC;AAE/C,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}