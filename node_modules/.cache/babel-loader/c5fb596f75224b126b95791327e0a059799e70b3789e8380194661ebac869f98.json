{"ast":null,"code":"const atob = globalThis.atob;\nconst btoa = globalThis.btoa;\n\n/**\n * Basic utilities for the RealtimeAPI\n * @class\n */\nexport class RealtimeUtils {\n  /**\n   * Converts Float32Array of amplitude data to ArrayBuffer in Int16Array format\n   * @param {Float32Array} float32Array\n   * @returns {ArrayBuffer}\n   */\n  static floatTo16BitPCM(float32Array) {\n    const buffer = new ArrayBuffer(float32Array.length * 2);\n    const view = new DataView(buffer);\n    let offset = 0;\n    for (let i = 0; i < float32Array.length; i++, offset += 2) {\n      let s = Math.max(-1, Math.min(1, float32Array[i]));\n      view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n    }\n    return buffer;\n  }\n\n  /**\n   * Converts a base64 string to an ArrayBuffer\n   * @param {string} base64\n   * @returns {ArrayBuffer}\n   */\n  static base64ToArrayBuffer(base64) {\n    const binaryString = atob(base64);\n    const len = binaryString.length;\n    const bytes = new Uint8Array(len);\n    for (let i = 0; i < len; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    return bytes.buffer;\n  }\n\n  /**\n   * Converts an ArrayBuffer, Int16Array or Float32Array to a base64 string\n   * @param {ArrayBuffer|Int16Array|Float32Array} arrayBuffer\n   * @returns {string}\n   */\n  static arrayBufferToBase64(arrayBuffer) {\n    if (arrayBuffer instanceof Float32Array) {\n      arrayBuffer = this.floatTo16BitPCM(arrayBuffer);\n    } else if (arrayBuffer instanceof Int16Array) {\n      arrayBuffer = arrayBuffer.buffer;\n    }\n    let binary = '';\n    let bytes = new Uint8Array(arrayBuffer);\n    const chunkSize = 0x8000; // 32KB chunk size\n    for (let i = 0; i < bytes.length; i += chunkSize) {\n      let chunk = bytes.subarray(i, i + chunkSize);\n      binary += String.fromCharCode.apply(null, chunk);\n    }\n    return btoa(binary);\n  }\n\n  /**\n   * Merge two Int16Arrays from Int16Arrays or ArrayBuffers\n   * @param {ArrayBuffer|Int16Array} left\n   * @param {ArrayBuffer|Int16Array} right\n   * @returns {Int16Array}\n   */\n  static mergeInt16Arrays(left, right) {\n    if (left instanceof ArrayBuffer) {\n      left = new Int16Array(left);\n    }\n    if (right instanceof ArrayBuffer) {\n      right = new Int16Array(right);\n    }\n    if (!(left instanceof Int16Array) || !(right instanceof Int16Array)) {\n      throw new Error(`Both items must be Int16Array`);\n    }\n    const newValues = new Int16Array(left.length + right.length);\n    for (let i = 0; i < left.length; i++) {\n      newValues[i] = left[i];\n    }\n    for (let j = 0; j < right.length; j++) {\n      newValues[left.length + j] = right[j];\n    }\n    return newValues;\n  }\n\n  /**\n   * Generates an id to send with events and messages\n   * @param {string} prefix\n   * @param {number} [length]\n   * @returns {string}\n   */\n  static generateId(prefix, length = 21) {\n    // base58; non-repeating chars\n    const chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n    const str = Array(length - prefix.length).fill(0).map(_ => chars[Math.floor(Math.random() * chars.length)]).join('');\n    return `${prefix}${str}`;\n  }\n}","map":{"version":3,"names":["atob","globalThis","btoa","RealtimeUtils","floatTo16BitPCM","float32Array","buffer","ArrayBuffer","length","view","DataView","offset","i","s","Math","max","min","setInt16","base64ToArrayBuffer","base64","binaryString","len","bytes","Uint8Array","charCodeAt","arrayBufferToBase64","arrayBuffer","Float32Array","Int16Array","binary","chunkSize","chunk","subarray","String","fromCharCode","apply","mergeInt16Arrays","left","right","Error","newValues","j","generateId","prefix","chars","str","Array","fill","map","_","floor","random","join"],"sources":["/Users/michaelmccarthy/Desktop/work_local/nxt_humans/projects/nxt-hackathon-front-end-app/node_modules/@openai/realtime-api-beta/lib/utils.js"],"sourcesContent":["const atob = globalThis.atob;\nconst btoa = globalThis.btoa;\n\n/**\n * Basic utilities for the RealtimeAPI\n * @class\n */\nexport class RealtimeUtils {\n  /**\n   * Converts Float32Array of amplitude data to ArrayBuffer in Int16Array format\n   * @param {Float32Array} float32Array\n   * @returns {ArrayBuffer}\n   */\n  static floatTo16BitPCM(float32Array) {\n    const buffer = new ArrayBuffer(float32Array.length * 2);\n    const view = new DataView(buffer);\n    let offset = 0;\n    for (let i = 0; i < float32Array.length; i++, offset += 2) {\n      let s = Math.max(-1, Math.min(1, float32Array[i]));\n      view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n    }\n    return buffer;\n  }\n\n  /**\n   * Converts a base64 string to an ArrayBuffer\n   * @param {string} base64\n   * @returns {ArrayBuffer}\n   */\n  static base64ToArrayBuffer(base64) {\n    const binaryString = atob(base64);\n    const len = binaryString.length;\n    const bytes = new Uint8Array(len);\n    for (let i = 0; i < len; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    return bytes.buffer;\n  }\n\n  /**\n   * Converts an ArrayBuffer, Int16Array or Float32Array to a base64 string\n   * @param {ArrayBuffer|Int16Array|Float32Array} arrayBuffer\n   * @returns {string}\n   */\n  static arrayBufferToBase64(arrayBuffer) {\n    if (arrayBuffer instanceof Float32Array) {\n      arrayBuffer = this.floatTo16BitPCM(arrayBuffer);\n    } else if (arrayBuffer instanceof Int16Array) {\n      arrayBuffer = arrayBuffer.buffer;\n    }\n    let binary = '';\n    let bytes = new Uint8Array(arrayBuffer);\n    const chunkSize = 0x8000; // 32KB chunk size\n    for (let i = 0; i < bytes.length; i += chunkSize) {\n      let chunk = bytes.subarray(i, i + chunkSize);\n      binary += String.fromCharCode.apply(null, chunk);\n    }\n    return btoa(binary);\n  }\n\n  /**\n   * Merge two Int16Arrays from Int16Arrays or ArrayBuffers\n   * @param {ArrayBuffer|Int16Array} left\n   * @param {ArrayBuffer|Int16Array} right\n   * @returns {Int16Array}\n   */\n  static mergeInt16Arrays(left, right) {\n    if (left instanceof ArrayBuffer) {\n      left = new Int16Array(left);\n    }\n    if (right instanceof ArrayBuffer) {\n      right = new Int16Array(right);\n    }\n    if (!(left instanceof Int16Array) || !(right instanceof Int16Array)) {\n      throw new Error(`Both items must be Int16Array`);\n    }\n    const newValues = new Int16Array(left.length + right.length);\n    for (let i = 0; i < left.length; i++) {\n      newValues[i] = left[i];\n    }\n    for (let j = 0; j < right.length; j++) {\n      newValues[left.length + j] = right[j];\n    }\n    return newValues;\n  }\n\n  /**\n   * Generates an id to send with events and messages\n   * @param {string} prefix\n   * @param {number} [length]\n   * @returns {string}\n   */\n  static generateId(prefix, length = 21) {\n    // base58; non-repeating chars\n    const chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n    const str = Array(length - prefix.length)\n      .fill(0)\n      .map((_) => chars[Math.floor(Math.random() * chars.length)])\n      .join('');\n    return `${prefix}${str}`;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}